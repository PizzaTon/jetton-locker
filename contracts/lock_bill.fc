#include "imports/stdlib.fc";
#include "./op_codes.fc";
#include "./params.fc";
#include "./jetton_utils.fc";
#include "./msgs.fc";

;; Each LockBill SBT will store a lock record of LockerCollection
;; They will store jetton_balance, lock_until date, jetton_wallet and jetton_master addresses

global int storage::index;
global int init?;
global slice storage::collection_address;
global slice storage::owner_address;
global slice storage::prev_owner;
global slice storage::authority_address;
global cell storage::content;
global int storage::revoked_at;
global int storage::lock_until;
global int storage::jetton_balance;
global int storage::jetton_wallet;
global int storage::jetton_master;

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::index              = ds~load_uint(64);
    storage::collection_address = ds~load_msg_addr();
    init?                       = false;

    if (ds.slice_bits() > 0) {
        init?                      = true;

        cell pack = ds~load_ref();
        slice ps = pack.begin_parse();
        storage::owner_address     = ps~load_msg_addr();
        storage::content           = ps~load_ref();
        storage::authority_address = ps~load_msg_addr();
        storage::revoked_at        = ps~load_uint(64);

        storage::prev_owner        = ds~load_msg_addr();
        storage::lock_until        = ds~load_uint(32);
        storage::jetton_balance    = ds~load_coins();

        cell j_wallet = ds~load_ref();
        slice j_wallet_s = j_wallet.begin_parse();
        (storage::jetton_wallet, storage::jetton_master)     = (j_wallet_s~load_uint(256), j_wallet_s~load_uint(256));
    }
}

() store_data() impure {
    set_data(
        begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::collection_address)
        .store_ref(
            begin_cell()
                .store_slice(storage::owner_address)
                .store_ref(storage::content)
                .store_slice(storage::authority_address)
                .store_uint(storage::revoked_at, 64)
            .end_cell()
        )
        .store_slice(storage::prev_owner)
        .store_uint(storage::lock_until, 32)
        .store_coins(storage::jetton_balance)
        .store_ref(
                begin_cell()
                .store_uint(storage::jetton_wallet, 256)
                .store_uint(storage::jetton_master, 256)
                .end_cell()
        )
        .end_cell()
    );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var body = begin_cell().store_uint(op, 32).store_uint(query_id, 64);
    if (~ builder_null?(payload)) {
        body = body.store_builder(payload);
    }

    var msg = begin_cell()
    .store_uint(flag, 6)
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(body.end_cell());

    send_raw_message(msg.end_cell(), send_mode);
}

slice to_string(int n) impure {
    builder b = begin_cell();
    tuple chars = null();
    do {
        int r = n~divmod(10);
        chars = cons(r + "0"u, chars);
    } until (n == 0);
    do {
        int char = chars~list_next();
        b~store_uint(char, 8);
    } until (null?(chars));
    return b.end_cell().begin_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    load_data();

    if (~ init?) {
        if (in_msg_body.slice_empty?()) { ;; ignore empty messages
            return ();
        }

        throw_unless(405, equal_slices(storage::collection_address, sender_address));

        storage::owner_address     = in_msg_body~load_msg_addr();
        storage::authority_address = in_msg_body~load_msg_addr();
        storage::revoked_at        = 0;
        storage::prev_owner        = null_addr();
        storage::lock_until        = in_msg_body~load_uint(32);
        throw_unless(406, storage::lock_until > now());
        storage::jetton_balance    = in_msg_body~load_coins();
        throw_unless(407, storage::jetton_balance > 0);
        cell wallet_data     = in_msg_body~load_ref();
        slice wallet_ds = wallet_data.begin_parse();
        (storage::jetton_wallet, storage::jetton_master) = (wallet_ds~load_uint(256), wallet_ds~load_uint(256));

        storage::content           = begin_cell()
                                            .store_slice(to_string(storage::index))
                                            .store_slice(begin_cell().store_uint("/"u, 8).end_cell().begin_parse())
                                            .store_slice(to_string(my_address().skip_bits(11).preload_uint(256)))
                                        .end_cell();
        store_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof()) {
            int query_id = in_msg_body~load_uint(64);
            ;; mode 64 = carry all the remaining value of the inbound message
            send_msg(flag::regular(), storage::owner_address, 0, op::ownership_proof_bounced(), query_id, null(), 64);
        }
        return ();
    }

    if(op == op::excesses()) {
        return ();
    }

    ;; Unlock Locked Tokens
    if (op == op::destroy()) | (op == 0) {
        ;; 0.02 TON would be enough to process unlocking
        throw_unless(13, my_balance + msg_value >= 50000000);

        if(op == op::destroy()) {
            in_msg_body~load_uint(64); ;; skip query_id
        } else {
            throw_unless(399, in_msg_body.slice_refs() == 0);
            throw_unless(400, equal_slices(in_msg_body, "#unlock") | equal_slices(in_msg_body, "u"));
        }
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        throw_unless(709, storage::jetton_balance > 0);

        throw_if(402, now() < storage::lock_until);

        msgs::send_simple(0, storage::collection_address, begin_cell()
            .store_uint(op::unlock_jettons(), 32)
            .store_uint(200, 64)
            .store_uint(storage::index, 64)
            .store_slice(storage::owner_address)
            .store_coins(storage::jetton_balance)
            .store_uint(storage::jetton_wallet, 256)
        .end_cell(), 128);

        storage::prev_owner = storage::owner_address;
        storage::owner_address = null_addr();
        storage::authority_address = null_addr();
        storage::jetton_balance = 0;
        store_data();
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::request_owner()) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        ;; the owner can always prove their ownership even if this record is cleard and has no jettons locked
        slice owner = storage::owner_address;
        if(equal_slices(owner, null_addr())) {
            owner = storage::prev_owner;
        }

        var msg = begin_cell()
        .store_uint(storage::index, 256)
        .store_slice(sender_address)
        .store_slice(owner)
        .store_ref(body)
        .store_uint(storage::revoked_at, 64)
        .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(storage::content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, msg, 64);
        return ();
    }
    if (op == op::prove_ownership()) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        ;; the owner can always prove their ownership even if this record is cleard and has no jettons locked
        slice owner = storage::owner_address;
        if(equal_slices(owner, null_addr())) {
            owner = storage::prev_owner;
        }

        var msg = begin_cell()
        .store_uint(storage::index, 256)
        .store_slice(owner)
        .store_ref(body)
        .store_uint(storage::revoked_at, 64)
        .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(storage::content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, msg, 64);
        return ();
    }
    if (op == op::get_static_data()) {
        var msg = begin_cell().store_uint(storage::index, 256).store_slice(storage::collection_address);

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular(), sender_address, 0, op::report_static_data(), query_id, msg, 64);
        return ();
    }
    if (op == op::revoke()) {
        throw_unless(401, equal_slices(storage::authority_address, sender_address));
        throw_unless(403, storage::revoked_at == 0);

        storage::revoked_at = now();
        store_data();
        return ();
    }
    if (op == op::transfer()) {
        ;; no one can transfer their lock bill (Lock Record) to other user
        throw(413);
    }
    if (op == op::take_excess()) {
        throw_unless(401, equal_slices(storage::collection_address, sender_address));

        ;; reserve amount for storage
        raw_reserve(min_tons_for_storage(), 0);

        send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);
        return ();
    }
    if (op == op::contract_upgrade()) { ;; update SBT's code & data from collection address
        throw_unless(405, equal_slices(storage::collection_address, sender_address));

        cell new_code = in_msg_body~load_ref();
        set_code(new_code);

        cell new_data = in_msg_body~load_maybe_ref();
        ifnot (new_data.null?()) {
            set_data(new_data);
        }

        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;
slice prev_owner() method_id {
    load_data();
    return storage::prev_owner;
}

int can_unlock() method_id {
    load_data();
    return now() > storage::lock_until;
}

(slice, int, int) get_info() method_id {
   load_data();
   return (hash_to_address(storage::jetton_master), storage::jetton_balance, storage::lock_until);
}

(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    return (init?, storage::index, storage::collection_address, storage::owner_address, storage::content);
}

slice get_authority_address() method_id {
    load_data();
    return storage::authority_address;
}

int get_revoked_time() method_id {
    load_data();
    return storage::revoked_at;
}

int get_lock_until() method_id {
    load_data();
    return storage::lock_until;
}

int get_lock_balance() method_id {
    load_data();
    return storage::jetton_balance;
}