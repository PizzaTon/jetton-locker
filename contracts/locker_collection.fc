#include "imports/stdlib.fc";
#include "./op_codes.fc";
#include "./params.fc";
#include "./jetton_utils.fc";
#include "./msgs.fc";

const ONE_DAY = 86400;

(slice, int, cell, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();

    slice owner_address = ds~load_msg_addr(); ;; owner_address
    int next_item_index = ds~load_uint(64); ;; next_item_index
    cell content = ds~load_ref(); ;; content
    cell nft_item_code = ds~load_ref(); ;; nft_item_code
    cell royalty = ds~load_ref();  ;; royalty_params

    cell wallets = new_dict();
    if (~ slice_empty?(ds)) {
        ;; list of valid jetton wallets (256 bit hash of the address => empty cell)
        wallets = ds~load_dict();
    }

    return (owner_address, next_item_index, content, nft_item_code, royalty, wallets);
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell jetton_wallets) impure inline {
    set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_dict(jetton_wallets)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(slice nft_address, cell state_init, int amount, cell nft_content, int send_mode) impure {
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
    send_raw_message(msg.end_cell(), send_mode); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

int round_time(int time) impure inline {
    ;; compute 12 o'clock of the input time
    (int q, int r) = divmod(time, ONE_DAY);
    return (time - r) + ONE_DAY;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_wallets) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == op::jetton_transfer_notification()) { ;; deploy new nft
        int amount = in_msg_body~load_coins();
        throw_unless(709, amount > 0);

        slice from = in_msg_body~load_msg_addr();
        cell payload = in_msg_body~load_maybe_ref();
        ifnot payload.null?() {
            slice ps = payload.begin_parse();
            int lock_until = ps~load_uint(32);

            int id = sender_address.skip_bits(11).preload_uint(256);
            (cell jetton_master, int f?) = jetton_wallets.udict_get_ref?(256, id);

            ;; we won't accept jettons if msg_value is less than 0.1 TON
            if((lock_until < now()) | (msg_value < 100000000) | (~ f?)) {
                transfer_jetton(sender_address, query_id, from, amount, 0, 0, 64);
                return ();
            }

            int jmaster_id = jetton_master.begin_parse().preload_uint(256);

            builder nft_content = begin_cell()
                .store_slice(from)
                .store_slice(my_address())
                .store_uint(round_time(lock_until), 32)
                .store_coins(amount)
                .store_ref(
                    begin_cell()
                    .store_uint(id, 256)
                    .store_uint(jmaster_id, 256)
                    .end_cell()
                );

            cell nft_state_init = calculate_nft_item_state_init(next_item_index, nft_item_code);
            slice nft_address = calculate_nft_item_address(workchain(), nft_state_init);
            deploy_nft_item(nft_address, nft_state_init, 50000000, nft_content.end_cell(), 1);
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_wallets);
        } else {
            ;; payload should contain lock_until date otherwise we should give jettons back to the sender
            transfer_jetton(sender_address, query_id, from, amount, 0, 0, 64);
        }
        return ();
    }

    if(op == op::excesses()) {
        ;; just accept all excesses
        return ();
    }

    if(op == op::unlock_jettons()) {
        int index = in_msg_body~load_uint(64);

        ;; only SBTs created by this collection can call this operation
        cell nft_state_init = calculate_nft_item_state_init(index, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), nft_state_init);
        throw_unless(401, equal_slices(sender_address, nft_address));

        slice real_owner = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int jetton_wallet_address = in_msg_body~load_uint(256);

        (cell __, int f?) = jetton_wallets.udict_get_ref?(256, jetton_wallet_address);
        throw_unless(501, f?);

        ;; send locked jettons back to the real owner of SBT
        transfer_jetton(hash_to_address(jetton_wallet_address), query_id + 1, real_owner, jetton_amount, 0, 0, 64);
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, jetton_wallets);
        return ();
    }
    if (op == 4) { ;; change content
        save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), jetton_wallets);
        return ();
    }
    if (op == op::add_jetton_wallet()) { ;; support new jetton
        slice jetton_wallet = in_msg_body~load_msg_addr();
        slice jetton_master = in_msg_body~load_msg_addr();
        int jwallet_id = jetton_wallet.skip_bits(11).preload_uint(256);
        int jmaster_id = jetton_master.skip_bits(11).preload_uint(256);
        jetton_wallets~udict_set_ref(256, jwallet_id, begin_cell().store_uint(jmaster_id, 256).end_cell());
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_wallets);
        return ();
    }
    if (op == op::remove_jetton_wallet()) { ;; remove a jetton wallet
        slice addr = in_msg_body~load_msg_addr();
        int id = addr.skip_bits(11).preload_uint(256);
        jetton_wallets~udict_delete_get?(256, id);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_wallets);
        return ();
    }
    if (op == op::replace_jetton_wallets()) {
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, in_msg_body~load_ref());
        return ();
    }
    if (op == op::contract_upgrade()) { ;; update collection's code & data
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);

        cell new_data = in_msg_body~load_maybe_ref();
        ifnot (new_data.null?()) {
            set_data(new_data);
        }

        return ();
    }
    if (op == op::upgrade_another_contract()) {
        slice nft_to_upgrade = in_msg_body~load_msg_addr();
        cell code = in_msg_body~load_ref();
        cell data = in_msg_body~load_maybe_ref();
        builder msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_to_upgrade)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(
            begin_cell()
            .store_uint(op::contract_upgrade(), 32)
            .store_uint(query_id, 64)
            .store_ref(code)
            .store_maybe_ref(data)
            .end_cell()
        );

        send_raw_message(msg.end_cell(), 64);

        return ();
    }
    if (op == op::withdraw_balance()) {
        int amount = in_msg_body~load_coins();
        throw_unless(37, my_balance - amount >= min_tons_for_storage());

        if (amount == 0) {
            amount = my_balance - min_tons_for_storage() - msg_value;
        }

        slice to = owner_address;
        if(slice_bits(in_msg_body) > 0) {
            to = in_msg_body~load_msg_addr();
        }

        var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_uint(query_id, 64);

        raw_reserve(min(my_balance, min_tons_for_storage()), 0); ;; 0.05 TON
        send_raw_message(msg.end_cell(), 64); ;; return all non reserve balance

        return ();
    }

    throw(0xffff);
}

;; Get methods

(cell) get_wallets() method_id {
    var (_, _, _, _, _, wallets) = load_data();
    return wallets;
}

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
    .store_uint(1, 8) ;; offchain tag
    .store_slice(common_content)
    .store_ref(individual_nft_content)
    .end_cell());
}