#include "imports/stdlib.fc";
#include "./op_codes.fc";
#include "./params.fc";
#include "./jetton_utils.fc";

;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return
    (ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_ref()  ;; royalty_params
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
    set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(slice nft_address, cell state_init, int amount, cell nft_content, int send_mode) impure {
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(nft_content);
    send_raw_message(msg.end_cell(), send_mode); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == op::jetton_transfer_notification()) { ;; deploy new nft
        int amount = in_msg_body~load_coins();
        slice from = in_msg_body~load_msg_addr();
        cell payload = in_msg_body~load_maybe_ref();
        ifnot payload.null?() {
            slice ps = payload.begin_parse();
            (slice jetton_master_address, cell jetton_wallet_code, int lock_until) = (ps~load_msg_addr(), ps~load_ref(), ps~load_uint(64));

            cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
            slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
            throw_unless(501, equal_slices(jetton_wallet_address, sender_address));

            builder nft_content = begin_cell()
                .store_slice(from)
                .store_slice(my_address())
                .store_uint(lock_until, 64)
                .store_coins(amount)
                .store_ref(
                    begin_cell()
                        .store_slice(jetton_master_address)
                        .store_ref(jetton_wallet_code)
                        .end_cell()
                );

            cell nft_state_init = calculate_nft_item_state_init(next_item_index, nft_item_code);
            slice nft_address = calculate_nft_item_address(workchain(), nft_state_init);
            deploy_nft_item( nft_address, nft_state_init, msg_value / 2, nft_content.end_cell(), 1);
            transfer_jetton(jetton_master_address, jetton_wallet_code, query_id, nft_address, amount, 0, my_balance / 2, 1);

            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
        }
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
        return ();
    }
    if (op == 4) { ;; change content
        save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref());
        return ();
    }

    if (op == op::contract_upgrade()) { ;; update collection's code & data
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);

        cell new_data = in_msg_body~load_maybe_ref();
        ifnot (new_data.null?()) {
            set_data(new_data);
        }

        return ();
    }
    if (op == op::upgrade_another_contract()) {
        slice nft_to_upgrade = in_msg_body~load_msg_addr();
        cell code = in_msg_body~load_ref();
        cell data = in_msg_body~load_maybe_ref();
        builder msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_to_upgrade)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(
            begin_cell()
            .store_uint(op::contract_upgrade(), 32)
            .store_uint(query_id, 64)
            .store_ref(code)
            .store_maybe_ref(data)
            .end_cell()
        );

        send_raw_message(msg.end_cell(), 64);

        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
    .store_uint(1, 8) ;; offchain tag
    .store_slice(common_content)
    .store_ref(individual_nft_content)
    .end_cell());
}